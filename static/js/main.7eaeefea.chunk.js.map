{"version":3,"sources":["components/Popular.js","utils/api.js","App.js","reportWebVitals.js","index.js"],"names":["LanguagesNav","selected","onUpdateLanguage","className","map","language","style","color","onClick","ReposGrid","repos","repo","index","name","owner","html_url","stargazers_count","forks","open_issues","login","avatar_url","src","alt","href","size","toLocaleString","JSON","stringify","Popular","props","state","selectedLanguage","error","updateLanguage","bind","isLoading","this","setState","endpoint","window","encodeURI","fetch","then","res","json","data","items","Error","message","fetchPopularRepos","catch","console","warn","Fragment","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eaeefea.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {fetchPopularRepos} from '../utils/api';\nimport {\n  FaUser,\n  FaStar,\n  FaCodeBranch,\n  FaExclamationTriangle,\n} from \"react-icons/fa\";\n\nfunction LanguagesNav({selected, onUpdateLanguage}){\n  const languages = [\"All\", \"JavaScript\", \"Ruby\", \"Java\", \"CSS\", \"Python\"];\n\n  return (\n    <ul className=\"flex-center\">\n      {languages.map((language) => (\n        <li key={language}>\n          <button\n            className=\"btn-clear nav-link\"\n            style={\n              language === selected\n                ? { color: \"rgb(187, 46, 31)\" }\n                : null\n            }\n            onClick={() => onUpdateLanguage(language)}\n          >\n            {language}\n          </button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nLanguagesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired\n};\n\nfunction ReposGrid({repos}){\n  return(\n    <ul className='grid space-around'>\n      {repos.map((repo, index)=>{\n        const {name, owner, html_url, stargazers_count, forks, open_issues }=repo\n        const {login, avatar_url}=owner\n\n        return (\n          <li key={html_url} className=\"repo bg-light\">\n            <h4 className=\"header-lg center-text\">#{index + 1}</h4>\n            <img\n              className=\"avatar\"\n              src={avatar_url}\n              alt={`Avatar for ${login}`}\n            />\n            <h2 className=\"center-text\">\n              <a className=\"link\" href={html_url}>\n                {login}\n              </a>\n            </h2>\n            <ul className=\"card-list\">\n              <li>\n                <FaUser color=\"rgb(255, 191, 116)\" size={22} />\n                <a href={`https://github.com/${login}`}>{login}</a>\n              </li>\n              <li>\n                <FaStar color=\"rgb(255, 215, 0)\" size={22} />\n                {stargazers_count.toLocaleString()} stars\n              </li>\n              <li>\n                <FaCodeBranch color=\"rgb(219, 195, 245)\" size={22} />\n                {forks.toLocaleString()} forks\n              </li>\n              <li>\n                <FaExclamationTriangle color=\"rgb(241, 138, 147)\" size={22} />\n                {open_issues.toLocaleString()} open open_issues\n              </li>\n            </ul>\n          </li>\n        );\n      })}\n      <pre>{JSON.stringify(repos, null, 2)}</pre>\n    </ul>\n  )\n}\n\nReposGrid.propTypes={\n  repos: PropTypes.array.isRequired\n}\n\nexport default class Popular extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedLanguage: 'All',\n      repos: {},\n      error: null\n    };\n\n    this.updateLanguage = this.updateLanguage.bind(this);\n    this.isLoading = this.isLoading.bind(this);\n  }\n  componentDidMount(){\n    this.updateLanguage(this.state.selectedLanguage)\n  }\n  updateLanguage(selectedLanguage){\n    this.setState({ selectedLanguage, error: null })\n\n    if(!this.state.repos[selectedLanguage]){\n      fetchPopularRepos(selectedLanguage)\n        .then((data) => {\n          this.setState(({ repos }) => ({\n            repos: {\n              ...repos,\n              [selectedLanguage]: data,\n            },\n          }));\n        })\n        .catch((error) => {\n          console.warn(\"Error fetching repos: \", error);\n\n          this.setState({\n            error: `There was an error fetching the repositories.`,\n          })\n        })\n    } \n  }\n  isLoading(){\n    const {selectedLanguage, repos, error}=this.state\n    return !repos[selectedLanguage] && error===null\n  }\n\n  render() {\n    const {selectedLanguage, repos, error }=this.state\n\n    return (\n      <React.Fragment>\n        <LanguagesNav\n          selected={this.state.selectedLanguage}\n          onUpdateLanguage={this.updateLanguage}\n        />\n\n        {this.isLoading() && <p>LOADING</p>}\n\n        {error && <p>{error}</p>}\n\n        {repos[selectedLanguage] && <ReposGrid repos={repos[selectedLanguage]} />}\n        \n      </React.Fragment>\n    );\n  }\n}\n","export function fetchPopularRepos(language){\n  const endpoint = window.encodeURI(`https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`)\n\n  return fetch(endpoint)\n    .then((res)=>res.json())\n    .then((data)=>{\n      if(!data.items){\n        throw new Error(data.message)\n      }\n      return data.items\n    })\n}\n\n","import React from 'react';\nimport './App.css';\nimport Popular from './components/Popular';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Popular />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}