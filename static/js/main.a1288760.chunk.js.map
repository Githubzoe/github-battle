{"version":3,"sources":["components/PopularLanguages.js","utils/api.js","App.js","reportWebVitals.js","index.js"],"names":["LanguagesNav","selected","onUpdateLanguage","className","map","language","style","color","onClick","PopularLanguages","props","state","selectedLanguage","repos","error","updateLanguage","bind","isLoading","this","setState","endpoint","window","encodeURI","fetch","then","res","json","data","items","Error","message","fetchPopularRepos","catch","console","warn","Fragment","JSON","stringify","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAIA,SAASA,EAAT,GAAoD,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,iBAG/B,OACE,oBAAIC,UAAU,cAAd,SAHgB,CAAC,MAAO,aAAc,OAAQ,OAAQ,MAAO,UAIhDC,KAAI,SAACC,GAAD,OACb,6BACE,wBACEF,UAAU,qBACVG,MACED,IAAaJ,EACT,CAAEM,MAAO,oBACT,KAENC,QAAS,kBAAMN,EAAiBG,IAPlC,SASGA,KAVIA,Q,IAuBII,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,iBAAkB,MAClBC,MAAO,GACPC,MAAO,MAGT,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAVA,E,qDAYnB,WACEE,KAAKH,eAAeG,KAAKP,MAAMC,oB,4BAEjC,SAAeA,GAAkB,IAAD,OAC9BM,KAAKC,SAAS,CAAEP,mBAAkBE,MAAO,OAErCI,KAAKP,MAAME,MAAMD,ICpDlB,SAA2BP,GAChC,IAAMe,EAAWC,OAAOC,UAAP,yEAAmFjB,EAAnF,6CAEjB,OAAOkB,MAAMH,GACVI,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAChBF,MAAK,SAACG,GACL,IAAIA,EAAKC,MACP,MAAM,IAAIC,MAAMF,EAAKG,SAEvB,OAAOH,EAAKC,SD4CZG,CAAkBnB,GACfY,MAAK,SAACG,GACL,EAAKR,UAAS,gBAAGN,EAAH,EAAGA,MAAH,MAAgB,CAC5BA,MAAM,2BACDA,GADA,kBAEFD,EAAmBe,WAIzBK,OAAM,SAAClB,GACNmB,QAAQC,KAAK,yBAA0BpB,GAEvC,EAAKK,SAAS,CACZL,MAAM,uD,uBAKhB,WACE,MAAuCI,KAAKP,MAArCC,EAAP,EAAOA,iBAAkBC,EAAzB,EAAyBA,MAAOC,EAAhC,EAAgCA,MAChC,OAAQD,EAAMD,IAA6B,OAARE,I,oBAGrC,WACE,MAAwCI,KAAKP,MAAtCC,EAAP,EAAOA,iBAAkBC,EAAzB,EAAyBA,MAAOC,EAAhC,EAAgCA,MAEhC,OACE,eAAC,IAAMqB,SAAP,WACE,cAACnC,EAAD,CACEC,SAAUiB,KAAKP,MAAMC,iBACrBV,iBAAkBgB,KAAKH,iBAGxBG,KAAKD,aAAe,wCAEpBH,GAAS,4BAAIA,IAEbD,EAAMD,IACL,8BAAMwB,KAAKC,UAAUxB,EAAMD,GAAmB,KAAM,Y,GA1DhB0B,IAAMC,WEpBrCC,MARf,WACE,OACE,qBAAKrC,UAAU,YAAf,SACE,cAAC,EAAD,OCISsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a1288760.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {fetchPopularRepos} from '../utils/api';\n\nfunction LanguagesNav({selected, onUpdateLanguage}){\n  const languages = [\"All\", \"JavaScript\", \"Ruby\", \"Java\", \"CSS\", \"Python\"];\n\n  return (\n    <ul className=\"flex-center\">\n      {languages.map((language) => (\n        <li key={language}>\n          <button\n            className=\"btn-clear nav-link\"\n            style={\n              language === selected\n                ? { color: \"rgb(187, 46, 31)\" }\n                : null\n            }\n            onClick={() => onUpdateLanguage(language)}\n          >\n            {language}\n          </button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nLanguagesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired\n};\n\nexport default class PopularLanguages extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedLanguage: 'All',\n      repos: {},\n      error: null\n    };\n\n    this.updateLanguage = this.updateLanguage.bind(this);\n    this.isLoading = this.isLoading.bind(this);\n  }\n  componentDidMount(){\n    this.updateLanguage(this.state.selectedLanguage)\n  }\n  updateLanguage(selectedLanguage){\n    this.setState({ selectedLanguage, error: null })\n\n    if(!this.state.repos[selectedLanguage]){\n      fetchPopularRepos(selectedLanguage)\n        .then((data) => {\n          this.setState(({ repos }) => ({\n            repos: {\n              ...repos,\n              [selectedLanguage]: data,\n            },\n          }));\n        })\n        .catch((error) => {\n          console.warn(\"Error fetching repos: \", error);\n\n          this.setState({\n            error: `There was an error fetching the repositories.`,\n          })\n        })\n    } \n  }\n  isLoading(){\n    const {selectedLanguage, repos, error}=this.state\n    return !repos[selectedLanguage] && error===null\n  }\n\n  render() {\n    const {selectedLanguage, repos, error }=this.state\n\n    return (\n      <React.Fragment>\n        <LanguagesNav\n          selected={this.state.selectedLanguage}\n          onUpdateLanguage={this.updateLanguage}\n        />\n\n        {this.isLoading() && <p>LOADING</p>}\n\n        {error && <p>{error}</p>}\n\n        {repos[selectedLanguage] && (\n          <pre>{JSON.stringify(repos[selectedLanguage], null, 2)}</pre>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n","export function fetchPopularRepos(language){\n  const endpoint = window.encodeURI(`https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`)\n\n  return fetch(endpoint)\n    .then((res)=>res.json())\n    .then((data)=>{\n      if(!data.items){\n        throw new Error(data.message)\n      }\n      return data.items\n    })\n}\n\n","import React from 'react';\nimport './App.css';\nimport PopularLanguages from './components/PopularLanguages';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <PopularLanguages />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}